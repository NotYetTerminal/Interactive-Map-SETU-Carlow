// Pseudocode for A* pathfinding algorithm
// Author: GÃ¡bor Major
// Date created: 2024-10-04

Node {
	x_coor,
	y_coor,
	z_coor, // used for 3 dimensions
	f_cost, // g_cost + h_cost
	g_cost, // distance traveled from starting node
	h_cost, // straight line distance to the end node
	neighbour_nodes_list, // nodes which have a connection to this node
	from_node // the previous node in the path
}

// starting_node is the node we are starting from
// end_node is the node we are looking for
function a_star_pathfinding(starting_node, end_node) {

	remaining_nodes_list = [] // to be checked nodes
	checked_nodes_list = [] // nodes that have been checked

	remaining_nodes_list.add(starting_node)

	while (remaining_nodes_list.length != 0) {
		// get the lowest f_cost node, or if f_cost is the same the lowest h_cost node
		current_node = remaining_nodes_list[0]
		for (other_node in remaining_nodes_list) {
			if (other_node.f_cost < current_node.f_cost ||
				(other_node.f_cost == current_node.f_cost && other_node.h_cost < current_node.h_cost)) {
				current_node = other_node
			}
		}

		if (current_node == end_node) {
			return True // node found
		}

		remaining_nodes_list.remove(current_node)
		checked_nodes_list.add(current_node)

		// compute values for each neighbour of the current_node
		for (neighbour_node in current_node.neighbour_nodes_list) {
			if (neighbour_node in checked_nodes_list) {
				continue
			}

			new_node = (neighbour_node not in remaining_nodes_list)
			new_distance_to_neighbour = current_node.g_cost + distance_to_node(current_node, neighbour_node)

			if (new_node or new_distance_to_neighbour < neighbour_node.g_cost) {
				neighbour_node.g_cost = new_distance_to_neighbour
				neighbour_node.from_node = current_node

				if (new_node) {
					neighbour_node.h_cost = distance_to_node(neighbour_node, end_node)
					remaining_nodes_list.add(neighbour_node)
				}
				neighbour_node.f_cost = neighbour_node.g_cost + neighbour_node.h_cost
			}
		}
	}

	return false // path not found between start and end nodes
}

// straight line distance between 2 nodes
function distance_to_node(from_node, to_node) {
	return math.square_root(
		(to_node.x_coor - from_node.x_coor) ^ 2 +
		(to_node.y_coor - from_node.y_coor) ^ 2
	)
}

// straight line distance between 2 nodes
function 3d_distance_to_node(from_node, to_node) {
	return math.square_root(
		(to_node.x_coor - from_node.x_coor) ^ 2 +
		(to_node.y_coor - from_node.y_coor) ^ 2 +
		(to_node.z_coor - from_node.z_coor) ^ 2
	)
}
